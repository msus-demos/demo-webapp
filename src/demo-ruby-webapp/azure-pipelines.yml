parameters:
  azureSubscription:
  acrName:
  dockerFullyQualifiedImageName:
  dockerTag:

jobs:
- job: BuildAndTest

  pool:
    vmImage: 'Ubuntu-16.04'

  variables:
    dockerImageAndTag: ${{ parameters['dockerFullyQualifiedImageName'] }}:${{ parameters['dockerTag'] }}
    latestTestTag: ${{ parameters['dockerFullyQualifiedImageName'] }}:test-latest

  steps:
  - task: AzureCLI@1
    displayName: Log in to ACR, pull and build test image
    inputs:
      azureSubscription: ${{ parameters['azureSubscription'] }}
      scriptLocation: inlineScript
      inlineScript: |
        # Fail on errors, output every command and result to the log
        set -e -x

        # Log in to the Azure Container Registry
        az acr login -n ${{ parameters['acrName'] }}

        # Pull the latest Test image _if_ it's available, we'll use that as a cache later
        docker pull $(latestTestTag) || true

        # Navigate to our app directory
        cd $(System.DefaultWorkingDirectory)/src/demo-ruby-webapp/

        # Build the Test stage and tag it as the latest Test image
        docker build -t $(latestTestTag) --target test --cache-from $(latestTestTag) .    

  - script: | 
      # Fail on errors, output every command and result to the log
      set -e -x

      # Run RSpec tests
      docker run -e 'RAILS_ENV=test' $(latestTestTag) bundle exec rspec
    displayName: Run RSpec Tests
    condition: eq(variables['Build.Reason'], 'PullRequest')

  - script: |
      # Fail on errors, output every command and result to the log
      set -e -x

      # Navigate to our app directory
      cd $(System.DefaultWorkingDirectory)/src/demo-ruby-webapp/

      # Build the Release Docker Stage, using the latest test image as a layer cache
      docker build -t $(dockerImageAndTag) --target release --cache-from $(latestTestTag) .

      # Push the Release image to ACR
      docker push $(dockerImageAndTag)

      # Push the Test image to ACR as test-latest
      docker push $(latestTestTag)
    displayName: Build and push the release container image
    condition: ne(variables['Build.Reason'], 'PullRequest')
