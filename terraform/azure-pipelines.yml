parameters:
  azureSubscription:
  storageAccountName:
  storageAccountKey:
  environment:
  planTier: standard
  planSku: s1

jobs:
- job: Deploy
  pool:
    vmImage: 'Ubuntu-16.04'

  steps:
  # Terraform Deploy
  - task: AzureCLI@1
    displayName: Terraform Deploy
    inputs:
      azureSubscription: $(sandboxAzureSubscription)
      scriptLocation: inlineScript
      workingDirectory: $(System.DefaultWorkingDirectory)/terraform/
      arguments: '${{ parameters.storageAccountKey }}'
      addSpnToEnvironment: true
      inlineScript: |
        # Fail on errors, output every command and result to the log
        set -e -x

        # Set terraform auth variables
        export ARM_CLIENT_ID=$servicePrincipalId
        export ARM_CLIENT_SECRET=$servicePrincipalKey
        export ARM_SUBSCRIPTION_ID=$(az account show --query id | xargs)
        export ARM_TENANT_ID=$(az account show --query tenantId | xargs)

        # Init terraform env
        terraform init \
            -backend-config="access_key=$1" \
            -backend-config="storage_account_name=${{ parameters['storageAccountName'] }}" \
            -input=false 

        # Select or create workspace
        terraform workspace select ${{ parameters.environment }} || terraform workspace new ${{ parameters.environment }}

        # Generate a Terraform plan
        terraform plan \
          -var environment="${{ parameters.environment }}" \
          -var plan_tier="${{ parameters.planTier }}" \
          -var plan_sku="${{ parameters.planSku }}" \
          -out=${{ parameters.environment }}.tfplan \
          -input=false 
        
        # Apply the Terraform plan
        terraform apply ${{ parameters.environment }}.tfplan
  condition: ne(variables['Build.Reason'], 'PullRequest')
